%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%           Generated by MATLAB 9.3 and Fixed-Point Designer 6.0           %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
function [q0, q1, q2, q3] = Madgwick_update_fixpt(q0_1, q1_1, q2_1, q3_1, qDot1_1, qDot2_1, qDot3_1, qDot4_1, s0, s1, s2, s3, beta_1, sampleTime_1)
fm = get_fimath();
beta = fi(beta_1, 0, 14, 17, fm);
q0 = fi(q0_1, 1, 14, 12, fm);
q1 = fi(q1_1, 1, 14, 12, fm);
q2 = fi(q2_1, 1, 14, 12, fm);
q3 = fi(q3_1, 1, 14, 12, fm);
qDot1 = fi(qDot1_1, 1, 14, 7, fm);
qDot2 = fi(qDot2_1, 1, 14, 7, fm);
qDot3 = fi(qDot3_1, 1, 14, 7, fm);
qDot4 = fi(qDot4_1, 1, 14, 7, fm);
sampleTime = fi(sampleTime_1, 0, 14, 22, fm);

sampleFreq	= fi(512.0, 0, 10, 0, fm);		% sample frequency in Hz
sampleTime    = fi(fi_div(fi(1, 0, 1, 0, fm), sampleFreq), 0, 14, 22, fm);
betaDef		= fi(0.1, 0, 14, 17, fm);		% 2 * proportional gain
beta = fi(betaDef, 0, 14, 17, fm);     % 2 * proportional gain (Kp)

% Apply feedback step
qDot1 = fi(qDot1 - beta * s0, 1, 14, 7, fm);
qDot2 = fi(qDot2 - beta * s1, 1, 14, 7, fm);
qDot3 = fi(qDot3 - beta * s2, 1, 14, 7, fm);
qDot4 = fi(qDot4 - beta * s3, 1, 14, 7, fm);

% Integrate rate of change of quaternion to yield quaternion
q0 = fi(q0 + qDot1 * sampleTime, 1, 14, 12, fm);
q1 = fi(q1 + qDot2 * sampleTime, 1, 14, 12, fm);
q2 = fi(q2 + qDot3 * sampleTime, 1, 14, 12, fm);
q3 = fi(q3 + qDot4 * sampleTime, 1, 14, 12, fm);
end



function ntype = divideType(a,b)
    coder.inline( 'always' );
    nt1 = numerictype( a );
    nt2 = numerictype( b );
    maxFL = max( [ min( nt1.WordLength, nt1.FractionLength ), min( nt2.WordLength, nt2.FractionLength ) ] );
    FL = max( maxFL, 24 );
    extraBits = (FL - maxFL);
    WL = nt1.WordLength + nt2.WordLength;
    WL = min( WL, 124 );
    if (WL + extraBits)<64
        ntype = numerictype( nt1.Signed || nt2.Signed, WL + extraBits, FL );
    else
        ntype = numerictype( nt1.Signed || nt2.Signed, WL, FL );
    end
end


function c = fi_div(a,b)
    coder.inline( 'always' );
    if isfi( a ) && isfi( b ) && isscalar( b )
        a1 = fi( a, 'RoundMode', 'fix' );
        b1 = fi( b, 'RoundMode', 'fix' );
        c1 = divide( divideType( a1, b1 ), a1, b1 );
        c = fi( c1, numerictype( c1 ), fimath( a ) );
    else
        c = a/b;
    end
end

function fm = get_fimath()
	fm = fimath('RoundingMethod', 'Floor',...
	     'OverflowAction', 'Wrap',...
	     'ProductMode','FullPrecision',...
	     'MaxProductWordLength', 128,...
	     'SumMode','FullPrecision',...
	     'MaxSumWordLength', 128);
end
