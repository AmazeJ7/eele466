-- -------------------------------------------------------------
-- 

-- File Name: C:\466\JG\Lab3\hdl_coder_Madgwick_normalize\codegen\Madgwick_normalize\hdlsrc\Madgwick_normalize_fixpt.vhd
-- Created: 2018-02-06 13:36:56
-- 
-- Generated by MATLAB 9.3, MATLAB Coder 3.4 and HDL Coder 3.11
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ax                            ce_out        1
-- ay                            ce_out        1
-- az                            ce_out        1
-- a3                            ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Madgwick_normalize_fixpt
-- Source Path: Madgwick_normalize_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Madgwick_normalize_fixpt_pac.ALL;

ENTITY Madgwick_normalize_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        ax_1                              :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        ay_1                              :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        az_1                              :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        a3_1                              :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        ce_out                            :   OUT   std_logic;
        ax                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
        ay                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
        az                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
        a3                                :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14
        );
END Madgwick_normalize_fixpt;


ARCHITECTURE rtl OF Madgwick_normalize_fixpt IS

  -- Constants
  CONSTANT One                            : unsigned(16 DOWNTO 0) := 
    to_unsigned(16#10000#, 17);  -- ufix17
  CONSTANT C_divbyzero_p                  : unsigned(16 DOWNTO 0) := 
    to_unsigned(16#1FFFF#, 17);  -- ufix17

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL ax_1_unsigned                    : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL ay_1_unsigned                    : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL az_1_unsigned                    : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp                              : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL tmp_1                            : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tmp_2                            : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL tmp_3                            : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tmp_4                            : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tmp_5                            : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL tmp_6                            : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL tmp_7                            : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL tmp_8                            : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL tmp_9                            : unsigned(13 DOWNTO 0);  -- ufix14_E16
  SIGNAL tmp_10                           : std_logic;
  SIGNAL p63tmp_cast                      : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL tmp_11                           : std_logic;
  SIGNAL y_y                              : unsigned(6 DOWNTO 0);  -- ufix7_E8
  SIGNAL y_y_1                            : unsigned(6 DOWNTO 0);  -- ufix7_E8
  SIGNAL tmp_13                           : unsigned(6 DOWNTO 0);  -- ufix7_E8
  SIGNAL tmp_14                           : std_logic;
  SIGNAL c_c_5                            : unsigned(31 DOWNTO 0);  -- ufix32_En24
  SIGNAL p0c_div_temp                     : unsigned(16 DOWNTO 0);  -- ufix17_En24
  SIGNAL c_c_6                            : unsigned(31 DOWNTO 0);  -- ufix32_En24
  SIGNAL tmp_15                           : unsigned(31 DOWNTO 0);  -- ufix32_En24
  SIGNAL tmp_16                           : unsigned(13 DOWNTO 0);  -- ufix14_En24
  SIGNAL tmp_17                           : unsigned(27 DOWNTO 0);  -- ufix28_En24
  SIGNAL tmp_18                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_19                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL ax_tmp                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_20                           : std_logic;
  SIGNAL p60tmp_cast                      : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL tmp_21                           : unsigned(27 DOWNTO 0);  -- ufix28_En24
  SIGNAL tmp_22                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_23                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL ay_tmp                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_24                           : std_logic;
  SIGNAL p57tmp_cast                      : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL tmp_25                           : unsigned(27 DOWNTO 0);  -- ufix28_En24
  SIGNAL tmp_26                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_27                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL az_tmp                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_28                           : std_logic;
  SIGNAL p54tmp_cast                      : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL a3_1_unsigned                    : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_29                           : unsigned(27 DOWNTO 0);  -- ufix28_En24
  SIGNAL tmp_30                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_31                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL a3_tmp                           : unsigned(13 DOWNTO 0);  -- ufix14

BEGIN
  -- 'Madgwick_normalize_fixpt:11' ax = fi(ax_1, 0, 14, 0, fm);
  ax_1_unsigned <= unsigned(ax_1);

  -- 'Madgwick_normalize_fixpt:12' ay = fi(ay_1, 0, 14, 0, fm);
  ay_1_unsigned <= unsigned(ay_1);

  -- 'Madgwick_normalize_fixpt:13' az = fi(az_1, 0, 14, 0, fm);
  az_1_unsigned <= unsigned(az_1);

  -- 'Madgwick_normalize_fixpt:15' a_dotproduct = fi(ax * ax + ay * ay + az * az, 0, 14, -16, fm);
  tmp <= ax_1_unsigned * ax_1_unsigned;

  tmp_1 <= resize(tmp, 29);

  tmp_2 <= ay_1_unsigned * ay_1_unsigned;

  tmp_3 <= resize(tmp_2, 29);

  tmp_4 <= tmp_1 + tmp_3;

  tmp_5 <= resize(tmp_4, 30);

  tmp_6 <= az_1_unsigned * az_1_unsigned;

  tmp_7 <= resize(tmp_6, 30);

  tmp_8 <= tmp_5 + tmp_7;

  tmp_9 <= tmp_8(29 DOWNTO 16);

  -- 'Madgwick_normalize_fixpt:17' if a_dotproduct ~= fi(0, 0, 1, 0, fm)
  p63tmp_cast <= tmp_9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0';
  
  tmp_10 <= '1' WHEN p63tmp_cast /= to_unsigned(16#00000000#, 30) ELSE
      '0';

  
  tmp_11 <= '1' WHEN tmp_9 = to_unsigned(16#0000#, 14) ELSE
      '0';

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_falseregionp68
  p1_output : PROCESS (tmp_9)
    VARIABLE yy : unsigned(6 DOWNTO 0);
    VARIABLE tmp12 : unsigned(6 DOWNTO 0);
    VARIABLE y_0 : unsigned(6 DOWNTO 0);
    VARIABLE cast : vector_of_unsigned8(0 TO 6);
    VARIABLE sll_temp : vector_of_unsigned7(0 TO 6);
    VARIABLE mul_temp : vector_of_unsigned14(0 TO 6);
    VARIABLE cast_0 : vector_of_unsigned8(0 TO 6);
    VARIABLE sll_temp_0 : vector_of_unsigned7(0 TO 6);
  BEGIN
    yy := to_unsigned(16#00#, 7);

    FOR ii IN 6 DOWNTO 0 LOOP
      cast(ii) := unsigned(to_signed(ii, 32)(7 DOWNTO 0));
      sll_temp(ii) := to_unsigned(16#01#, 7) sll to_integer(cast(ii));
      tmp12 := yy OR sll_temp(ii);
      mul_temp(ii) := tmp12 * tmp12;
      IF mul_temp(ii) <= tmp_9 THEN 
        cast_0(ii) := unsigned(to_signed(ii, 32)(7 DOWNTO 0));
        sll_temp_0(ii) := to_unsigned(16#01#, 7) sll to_integer(cast_0(ii));
        y_0 := yy OR sll_temp_0(ii);
      ELSE 
        y_0 := yy;
      END IF;
      yy := y_0;
    END LOOP;

    y_y <= yy;
  END PROCESS p1_output;


  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp68
  y_y_1 <= to_unsigned(16#00#, 7);

  -- 'Madgwick_normalize_fixpt:51' coder.inline( 'always' );
  -- 
  -- 'Madgwick_normalize_fixpt:52' if isfi( a ) && isfi( b ) && isscalar( b )
  -- 
  -- 'Madgwick_normalize_fixpt:53' a1 = fi( a, 'RoundMode', 'fix' );
  -- 
  -- 'Madgwick_normalize_fixpt:54' b1 = fi( b, 'RoundMode', 'fix' );
  
  tmp_13 <= y_y WHEN tmp_11 = '0' ELSE
      y_y_1;

  -- 'Madgwick_normalize_fixpt:55' c1 = divide( divideType( a1, b1 ), a1, b1 );
  
  tmp_14 <= '1' WHEN tmp_13 = to_unsigned(16#00#, 7) ELSE
      '0';

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_falseregionp64
  
  p0c_div_temp <= C_divbyzero_p WHEN tmp_13 = 0 ELSE
      One / tmp_13;
  c_c_5 <= resize(p0c_div_temp, 32);

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp64
  c_c_6 <= unsigned'(X"FFFFFFFF");

  -- 'Madgwick_normalize_fixpt:56' c = fi( c1, numerictype( c1 ), fimath( a ) );
  
  tmp_15 <= c_c_5 WHEN tmp_14 = '0' ELSE
      c_c_6;

  tmp_16 <= tmp_15(13 DOWNTO 0);

  tmp_17 <= ax_1_unsigned * tmp_16;

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp61
  tmp_18 <= resize(tmp_17(27 DOWNTO 24), 14);

  
  tmp_19 <= ax_1_unsigned WHEN tmp_10 = '0' ELSE
      tmp_18;

  enb <= clk_enable;

  ax_reg_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      ax_tmp <= to_unsigned(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        ax_tmp <= tmp_19;
      END IF;
    END IF;
  END PROCESS ax_reg_process;


  ax <= std_logic_vector(ax_tmp);

  p60tmp_cast <= tmp_9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0';
  
  tmp_20 <= '1' WHEN p60tmp_cast /= to_unsigned(16#00000000#, 30) ELSE
      '0';

  tmp_21 <= ay_1_unsigned * tmp_16;

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp58
  tmp_22 <= resize(tmp_21(27 DOWNTO 24), 14);

  
  tmp_23 <= ay_1_unsigned WHEN tmp_20 = '0' ELSE
      tmp_22;

  ay_reg_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      ay_tmp <= to_unsigned(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        ay_tmp <= tmp_23;
      END IF;
    END IF;
  END PROCESS ay_reg_process;


  ay <= std_logic_vector(ay_tmp);

  p57tmp_cast <= tmp_9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0';
  
  tmp_24 <= '1' WHEN p57tmp_cast /= to_unsigned(16#00000000#, 30) ELSE
      '0';

  tmp_25 <= az_1_unsigned * tmp_16;

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp55
  tmp_26 <= resize(tmp_25(27 DOWNTO 24), 14);

  
  tmp_27 <= az_1_unsigned WHEN tmp_24 = '0' ELSE
      tmp_26;

  az_reg_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      az_tmp <= to_unsigned(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        az_tmp <= tmp_27;
      END IF;
    END IF;
  END PROCESS az_reg_process;


  az <= std_logic_vector(az_tmp);

  p54tmp_cast <= tmp_9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0';
  
  tmp_28 <= '1' WHEN p54tmp_cast /= to_unsigned(16#00000000#, 30) ELSE
      '0';

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt
  -- 
  -- 'Madgwick_normalize_fixpt:21' a3 = fi(a3 * recipNorm, 0, 14, 0, fm);
  -- 
  -- 'Madgwick_normalize_fixpt:20' az = fi(az * recipNorm, 0, 14, 0, fm);
  -- 
  -- 'Madgwick_normalize_fixpt:19' ay = fi(ay * recipNorm, 0, 14, 0, fm);
  -- 
  -- 'Madgwick_normalize_fixpt:18' ax = fi(ax * recipNorm, 0, 14, 0, fm);
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  --                                                                          %
  -- 
  --           Generated by MATLAB 9.3 and Fixed-Point Designer 6.0           %
  -- 
  --                                                                          %
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  -- Normalise accelerometer measurement
  -- 
  -- 'Madgwick_normalize_fixpt:9' fm = get_fimath();
  -- 
  -- 'Madgwick_normalize_fixpt:10' a3 = fi(a3_1, 0, 14, 0, fm);
  a3_1_unsigned <= unsigned(a3_1);

  tmp_29 <= a3_1_unsigned * tmp_16;

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp52
  tmp_30 <= resize(tmp_29(27 DOWNTO 24), 14);

  
  tmp_31 <= a3_1_unsigned WHEN tmp_28 = '0' ELSE
      tmp_30;

  a3_reg_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      a3_tmp <= to_unsigned(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        a3_tmp <= tmp_31;
      END IF;
    END IF;
  END PROCESS a3_reg_process;


  a3 <= std_logic_vector(a3_tmp);

  ce_out <= clk_enable;

END rtl;

